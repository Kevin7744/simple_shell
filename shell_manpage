.TH Simple_Shell 1 02/12/2021 GNU 
.SH NAME
    Simple_Shell - the standard command language interpreter (shell)

.SH SYNOPSIS
    
    We have recreated a shell in c language, this one works like the sh command
    run the simple_shell file, a terminal will open and wait for a command.

.SH DESCRIPTION
    The shell is a command language interpreter for the system.
    The current version is similar to the sh command, but there are some differences, some functions are not implemented, and 
    some features are absent.

.SS Overview
    This shell will read line form the STDIN_FILENO, interpets them, and exectue it. That will, firstable, check if any built-in command correspond to the
    input, then check on the PATH, and finally check on the local directory. If no command is found, it will print an error message, in the STDERR_FILENO.
    Also refer to the exit code of any existing command. 
    To exit the shell, exit built-in command need to be use, exit with the last code error, or a personnal code error if argument is passed through 
    the exit command.

.SS Use
    There two way to use the simple shell, by interactive mode, and uninteractive mode.
    Interactive mode is the default mode, when run the ./hsh, and it will wait for a command, then check it, and execute it.
    The uninteractive mode will work as this exemple: echo "ls *.c" | ./hsh. And only print the result of the command in the STDOUT_FILENO.

.SS Arguments
    No argument are needed, but if you want to use the uninteractive mode, you need to pass the command to execute through the STDIN_FILENO.

.SS Operator & Structures
    No operator are implemented, you only can use simple command with flag if you want.
    Also quotes are not implemented, if you use echo "hello world", "hello world" will be printed on the STDOUT_FILENO.

.SS Search and Execution
    We treat these 3 different types of command: Built-ins, PATH commands, and local directory executables. Aliases are not implemented yet.

    The ways we search for a command are simple.
    The program will first make a copy of the env, to store it in a global variable.
    Also when a command is input, simple_shell will make some check, to verify if the command is right, like if not only '\n' or '#' etc..
    After these check, remplace all the separator by space, to be separate in 2D array, by some functions.
    
    Then, when the command is ready, in the good syntaxes, the simple_shell will ckeck if the command is not a built-in, if not, check if the
    command is in the PATH, if not, check if the command is in the local directory.

.SS Searching in the PATH
    The program will check if the command exist in a PATH directory, check the first, then the second etc... When find it, stop 
    the check and take the command

.SS Command exit status
    If by any chance, the command correspond to anything, the program will respond to a 127 code error.
    If the command exist in the PATH, and but can't be execute, the program will respond to a 2 code error.
    Else, if the command was find in the built-in, in the PATH, or as an executable file in the current directory, the program will respond to 
    a 0 code error.

    To check the code error, "echo $$" will print it.

.SS Variables and environment
    You can modify all the environement with the built-in command setenv and unsetenv, will replace the export and unset command.
    The syntaxes can be find with the help command directly in the simple_shell.

.SS Comment
    You can use comment, by using the '#' character, and the program will ignore rest of the line.

.SS Parameter expansion
    The parameter expansion is only implemented if you use echo $PARAM, otherwise, it's not implamented yet.

.SS Return value
    The program have not return value, only a exit code of the last command exit code, or a personnal code error. 
    Cf Comand exit status.

.SH Command

.SS Built-in :
    The following commands are built-in, and been check as:

    -exit       exit the simple shell, with a code error (0 by default).

    -env        print the current environement.

    -setenv     set the environement variable.

    -unsetenv   unset the environement variable.

    -help       print the help of built-in command.

    -cd         not implemented yet.

.SS Other : 
    The classic command that you can find in the PATH, like in the /bin/ directory are implemented.

.SH ENV
    Will copy the current environement of your machine, and the use it, can also change it without broke anything on your current machine.

.SH EXAMPLES

.SS Interactive mode
    $ ./hsh

    ($) ls
        /alx-low_level_programming   bermuda_triangle.c  simple_shell.cd

    ($) /bin/cat bermuda_triangle.c
        #include <stdio.h>

        int main(void)
        {
            printf(nothing to see here);
        }

    ($) exit

    $

.SS Uninteractive mode
    $ echo "ls *.c" | ./hsh
        /alx-low_level_programming   bermuda_triangle.c  simple_shell.cd
    
    $ echo "cat bermuda_triangle.c" | ./hsh
        #include <stdio.h>

        int main(void)
        {
            printf(nothing to see here);
        }

.SH Bugs
    No bugs are known.

.SH AUTHOR
	Francis Nderitu, and Kevin Kipkoech
